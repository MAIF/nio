# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

play.application.loader = loader.NioLoader

// add filter NioFilter
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

play {
  filters {
    enabled += filters.OtoroshiFilter
    enabled += play.filters.gzip.GzipFilter
    disabled += play.filters.csrf.CSRFFilter
    headers.contentSecurityPolicy = null
    # The allowed origins. If null, all origins are allowed.
    cors.allowedOrigins = null
    hosts {
      allowed = ["."]
    }
  }
  http {
    session {
      cookieName = NIO_SESSION
    }
  }
}

blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
  throughput = 1
}

play.filters.gzip {

  contentType {

    # If non empty, then a response will only be compressed if its content type is in this list.
    whiteList = [ "application/json" ]

    # The black list is only used if the white list is empty.
    # Compress all responses except the ones whose content type is in this list.
    blackList = []
  }
}

play.http.secret.key = "nioSecret"
play.http.secret.key = ${?APPLICATION_SECRET}
http.port=9001
http.port=${?HTTP_PORT}

nio {
  websocketHost = "ws://localhost:9001"
  websocketHost = ${?WEBSOCKET_HOST}
  nio {
    url = "http://localhost:9000"
    url = ${?NIO_URL}
    headerValueClientId = "Otoroshi-Client-Id"
    headerValueClientId = ${?NIO_HEADER_VALUE_CLIENT_ID}
    headerValueClientSecret = "Otoroshi-Client-Secret"
    headerValueClientSecret = ${?NIO_HEADER_VALUE_CLIENT_SECRET}
  }
  filter {
    otoroshi {
      issuer = "Otoroshi"
      issuer = ${?OTOROSHI_ISSUER}
      sharedKey = "none"
      sharedKey = ${?CLAIM_SHAREDKEY}
      headerClaim = "Otoroshi-Claim"
      headerClaim = ${?FILTER_CLAIM_HEADER_NAME}
      headerRequestId = "Otoroshi-Request-Id"
      headerRequestId = ${?FILTER_REQUEST_ID_HEADER_NAME}
      headerGatewayState = "Otoroshi-State"
      headerGatewayState = ${?FILTER_GATEWAY_STATE_HEADER_NAME}
      headerGatewayStateResp = "Otoroshi-State-Resp"
      headerGatewayStateResp = ${?FILTER_GATEWAY_STATE_RESP_HEADER_NAME}
      headerGatewayHeaderClientId = "Otoroshi-Client-Id"
      headerGatewayHeaderClientId = ${?FILTER_GATEWAY_HEADER_CLIENT_ID}
      headerGatewayHeaderClientSecret = "Otoroshi-Client-Secret"
      headerGatewayHeaderClientSecret = ${?FILTER_GATEWAY_HEADER_CLIENT_SECRET}
    }
  }
  kafka {
    host = "127.0.0.1"
    port = "29092"
    servers = ${nio.kafka.host}":"${nio.kafka.port}
    servers = ${?KAFKA_HOST}
    nbPartitions = 3
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
    topic = "nio-consent-events"
    topic = ${?KAFKA_TOPIC}
    eventIdSeed = 0
    eventIdSeed = ${?KAFKA_EVENT_ID_SEED}
    groupId = "nio-provider"
    groupId = ${?KAFKA_GROUP_ID}
    eventsGroupIn = 10000
    eventsGroupIn = ${?KAFKA_EVENT_GROUP_IN}
    eventsGroupDuration = "10 hours"
    eventsGroupDuration = ${?KAFKA_EVENT_GROUP_DURATION}
  }
}

security = "DevMode"
//security = "Otoroshi"
security = ${?SECURITY}