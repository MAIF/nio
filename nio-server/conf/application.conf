# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

// add filter NioFilter
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

play {
  filters {
    enabled += filters.OtoroshiFilter
    disabled += play.filters.csrf.CSRFFilter
    headers.contentSecurityPolicy = null
    # The allowed origins. If null, all origins are allowed.
    cors.allowedOrigins = null
    hosts {
      allowed = ["."]
    }
  }
  http {
    session {
      cookieName = NIO_SESSION
    }
  }
}

S3-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 1
}

play.http.secret.key = "nioSecret"
play.http.secret.key = ${?APPLICATION_SECRET}
http.port=9000
http.port=${?HTTP_PORT}

nio {
  logoutUrl= "http://localhost:9000/api/logout/"
  logoutUrl= ${?LOGOUT_URL}
  filter {
    otoroshi {
      issuer = "Otoroshi"
      issuer = ${?OTOROSHI_ISSUER}
      sharedKey = "none"
      sharedKey = ${?CLAIM_SHAREDKEY}
      headerClaim = "Otoroshi-Claim"
      headerClaim = ${?FILTER_CLAIM_HEADER_NAME}
      headerRequestId = "Otoroshi-Request-Id"
      headerRequestId = ${?FILTER_REQUEST_ID_HEADER_NAME}
      headerGatewayState = "Otoroshi-State"
      headerGatewayState = ${?FILTER_GATEWAY_STATE_HEADER_NAME}
      headerGatewayStateResp = "Otoroshi-State-Resp"
      headerGatewayStateResp = ${?FILTER_GATEWAY_STATE_RESP_HEADER_NAME}
    }
  }
  recordManagementEnabled = true
  recordManagementEnabled = ${?ENABLE_RECORD_MANAGEMENT}
  s3ManagementEnabled = true
  s3ManagementEnabled = ${?ENABLE_S3_MANAGEMENT}
  kafka {
    host = "127.0.0.1"
    port = "9092"
    servers = ${nio.kafka.host}":"${nio.kafka.port}
    servers = ${?KAFKA_HOST}
    nbPartitions = 3
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
    topic = "nio-consent-events"
    topic = ${?KAFKA_TOPIC}
    eventIdSeed = 0
    eventIdSeed = ${?KAFKA_EVENT_ID_SEED}
    groupId = "nio"
    groupId = ${?KAFKA_GROUP_ID}
    eventsGroupIn = 10
    eventsGroupIn = ${?KAFKA_EVENT_GROUP_IN}
    eventsGroupDuration = "10 seconds"
    eventsGroupDuration = ${?KAFKA_EVENT_GROUP_DURATION}
  }
  s3Config {
    bucketName = "nioevents"
    bucketName  = ${?CELLAR_BUCKET_NAME}
    host= "http://localhost:8000"
    host=${?CELLAR_ADDON_HOST}
    accessKey= "newAccessKey"
    accessKey=${?CELLAR_ADDON_KEY_ID}
    secretKey= "newSecretKey"
    secretKey=${?CELLAR_ADDON_KEY_SECRET}
  }
}

db {
  flush = true
  flush = ${?DB_FLUSH}

  tenants = ["prod1"]
}

tenant {
  admin {
    secret = changeme
    secret = ${?TENANT_ADMIN_SECRET}
    header = "tenant-admin-secret"
    header = ${?TENANT_ADMIN_HEADER}
  }
}


mongodb.uri = "mongodb://localhost:27017/nio"
mongodb.uri = ${?MONGODB_ADDON_URI}

security = "DevMode"
//security = "Otoroshi"
security = ${?SECURITY}

include "default"