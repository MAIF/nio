# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

play.application.loader = loader.NioLoader

// add filter NioFilter
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

play {
  filters {
    enabled += filters.OtoroshiFilter
    enabled += play.filters.gzip.GzipFilter
    disabled += play.filters.csrf.CSRFFilter
    headers.contentSecurityPolicy = null
    # The allowed origins. If null, all origins are allowed.
    cors.allowedOrigins = null
    hosts {
      allowed = ["."]
    }
  }
  http {
    session {
      cookieName = NIO_SESSION
    }
  }
}

blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
  throughput = 1
}

play.filters.gzip {

  contentType {

    # If non empty, then a response will only be compressed if its content type is in this list.
    whiteList = [ "application/json" ]

    # The black list is only used if the white list is empty.
    # Compress all responses except the ones whose content type is in this list.
    blackList = []
  }
}

S3-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 1
}

play.http.secret.key = "nioSecret"
play.http.secret.key = ${?APPLICATION_SECRET}
http.port=9000
http.port=${?HTTP_PORT}

nio {
  baseUrl= "http://localhost:9000"
  baseUrl= ${?NIO_BASE_URL}
  logoutUrl= "http://localhost:9000/api/nio/logout"
  logoutUrl= ${?LOGOUT_URL}
  downloadFileHost= "http://localhost:9000/_download"
  downloadFileHost= ${?DOWNLOAD_FILE_HOST}
  filter {
//    securityMode = "default"
    securityMode = "otoroshi"
    securityMode = ${?SECURITY_MODE}
    otoroshi {
      issuer = "Otoroshi"
      issuer = ${?OTOROSHI_ISSUER}
      sharedKey = "none"
      sharedKey = ${?CLAIM_SHAREDKEY}
      headerClaim = "Otoroshi-Claim"
      headerClaim = ${?FILTER_CLAIM_HEADER_NAME}
      headerRequestId = "Otoroshi-Request-Id"
      headerRequestId = ${?FILTER_REQUEST_ID_HEADER_NAME}
      headerGatewayState = "Otoroshi-State"
      headerGatewayState = ${?FILTER_GATEWAY_STATE_HEADER_NAME}
      headerGatewayStateResp = "Otoroshi-State-Resp"
      headerGatewayStateResp = ${?FILTER_GATEWAY_STATE_RESP_HEADER_NAME}
      headerGatewayHeaderClientId = "Otoroshi-Client-Id"
      headerGatewayHeaderClientId = ${?FILTER_GATEWAY_HEADER_CLIENT_ID}
      headerGatewayHeaderClientSecret = "Otoroshi-Client-Secret"
      headerGatewayHeaderClientSecret = ${?FILTER_GATEWAY_HEADER_CLIENT_SECRET}
    }
    default {
      allowedPaths = ["/", "/.*/bo", "/.*/bo/", "/.*/bo/.*", "/login", "/api/nio/login","/api/nio/logout","/favicon.ico","/assets/.*"]
      sharedKey = "Nio"
      sharedKey = ${?FILTER_CLAIM_SHARED_KEY}
      cookieClaim = "Nio"
      cookieClaim = ${?FILTER_COOKIE_CLAIM}
      issuer = "Nio"
      issuer = ${?FILTER_ISSUER}
      apiKeys {
        headerClientId = "Nio-Client-Id"
        headerClientId = ${?FILTER_CLAIM_HEADER_CLIENT_ID_NAME}
        headerClientSecret = "Nio-Client-Secret"
        headerClientSecret = ${?FILTER_CLAIM_HEADER_CLIENT_SECRET_NAME}
      }
      defaultUser {
        username = "admin@nio.fr"
        username = ${?NIO_DEFAULT_USER}
        password = "admin"
        password = ${?NIO_DEFAULT_PASSWORD}
        clientId = "nioClientId"
        clientId = ${?NIO_DEFAULT_CLIENT_ID}
        clientSecret = "nioClientSecret"
        clientSecret = ${?NIO_DEFAULT_CLIENT_SECRET}
      }
    }
  }
  recordManagementEnabled = true
  recordManagementEnabled = ${?ENABLE_RECORD_MANAGEMENT}
  s3ManagementEnabled = true
  s3ManagementEnabled = ${?ENABLE_S3_MANAGEMENT}
  kafka {
    host = "127.0.0.1"
    port = "29092"
    servers = ${nio.kafka.host}":"${nio.kafka.port}
    servers = ${?KAFKA_HOST}
    nbPartitions = 3
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
    topic = "nio-consent-events"
    topic = ${?KAFKA_TOPIC}
    eventIdSeed = 0
    eventIdSeed = ${?KAFKA_EVENT_ID_SEED}
    groupId = "nio"
    groupId = ${?KAFKA_GROUP_ID}
    eventsGroupIn = 10000
    eventsGroupIn = ${?KAFKA_EVENT_GROUP_IN}
    eventsGroupDuration = "10 hours"
    eventsGroupDuration = ${?KAFKA_EVENT_GROUP_DURATION}
  }
  s3Config {
    bucketName = "nioevents"
    bucketName  = ${?CELLAR_BUCKET_NAME}
    uploadBucketName= "nioupload"
    uploadBucketName = ${?CELLAR_UPLOAD_BUCKET_NAME}
    endpoint="http://localhost:8000"
    endpoint=${?CELLAR_ADDON_HOST}
    accessKey= "newAccessKey"
    accessKey=${?CELLAR_ADDON_KEY_ID}
    secretKey= "newSecretKey"
    secretKey=${?CELLAR_ADDON_KEY_SECRET}
    expireAtInDay=60
    expireAtInDay=${?CELLAR_UPLOAD_EXPIRE_AT_IN_DAY}

    v4auth = true
    v4auth = ${?S3_V4AUTH}
    region = "us-west-2"
    region = ${?S3_REGION}
    chunkSizeInMb = 50 // Mb
    chunkSizeInMb = ${?S3_CHUNK_SIZE_IN_MB}
    expirationCheckPeriodInSeconds = 30
    expirationCheckPeriodInSeconds = ${?S3_EXPIRATION_CHECK_PERIOD_IN_SECONDS}
    expirationInDays = 2 // Days
    expirationInDays = ${?S3_EXPIRATION_IN_DAYS}
  }
  mailSendingEnable = false
  mailSendingEnable = ${?ENABLE_MAIL_SENDING}
  mailGunConfig {
    apiKey = "1234"
    apiKey = ${?MAIL_GUN_API_KEY}
    endpoint = "https://api.mailgun.net/v3/my-custom-domain"
    endpoint = ${?MAIL_GUN_ENDPOINT}
    from = "nio-mail@my-custom-domain"
    from = ${?MAIL_GUN_SENDER}
  }
}

db {
  flush = false
  flush = ${?DB_FLUSH}

  tenants = ["sandbox"]
}

tenant {
  admin {
    secret = changeme
    secret = ${?TENANT_ADMIN_SECRET}
    header = "tenant-admin-secret"
    header = ${?TENANT_ADMIN_HEADER}
  }
}

healthcheck {
  secret = changeme
  secret = ${?HEALTH_CHECK_SECRET}
  header = "health-check-secret"
  header = ${?HEALTH_CHECK_HEADER}
}


mongodb.uri = "mongodb://localhost:27017/nio"
mongodb.uri = ${?MONGODB_ADDON_URI}

include "default"