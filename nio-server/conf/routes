# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET           /assets/swagger/swagger.json                                                                                controllers.HomeController.swagger()
GET           /docs/swagger-ui/*file                                                                                      controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                                                               controllers.Assets.versioned(path="/public", file: Asset)

GET           /:tenant/bo                                                                                                 controllers.HomeController.index(tenant: String)
GET           /:tenant/bo/                                                                                                controllers.HomeController.indexOther(tenant: String)

GET           /                                                                                                           controllers.HomeController.indexNoTenant

GET           /login                                                                                                      controllers.HomeController.login

# Manage Nio Account

#GET           /api/nio/accounts                                                                                           controllers.NioAccountController.findAll(page: Int ?= 0, pageSize: Int ?= 10)
#
#GET           /api/nio/accounts/:nioAccountId                                                                             controllers.NioAccountController.find(nioAccountId: String)
#
#POST          /api/nio/accounts                                                                                           controllers.NioAccountController.create
#
#PUT           /api/nio/accounts/:nioAccountId                                                                             controllers.NioAccountController.update(nioAccountId: String)
#
#DELETE        /api/nio/accounts/:nioAccountId                                                                             controllers.NioAccountController.delete(nioAccountId: String)
#
#POST          /api/nio/login                                                                                              controllers.NioAuthenticateController.login
#
#GET           /api/nio/logout                                                                                              controllers.NioAuthenticateController.logout


# Deletions

GET           /api/:tenant/organisations/:orgKey/users/deletions                                                          controllers.DeletionController.allDeletionTasksByOrgKey(tenant: String, orgKey: String)

GET           /api/:tenant/organisations/:orgKey/users/deletions/:deletionTaskId                                          controllers.DeletionController.findDeletionTask(tenant: String, orgKey: String, deletionTaskId: String)

POST          /api/:tenant/organisations/:orgKey/users/:userId/deletion/_start                                            controllers.DeletionController.startDeletionTask(tenant: String, orgKey: String, userId: String)

POST          /api/:tenant/organisations/:orgKey/users/deletions/:deletionTaskId/apps/:appId/_done                        controllers.DeletionController.updateDeletionTask(tenant: String, orgKey: String, deletionTaskId: String, appId: String)


# Extractions

POST          /api/:tenant/organisations/:orgKey/users/:userId/_extract                                                   controllers.UserExtractController.extractData(tenant: String, orgKey: String, userId: String)

POST          /api/:tenant/organisations/:orgKey/users/:userId/_files/*name                                               controllers.UserExtractController.uploadFile(tenant: String, orgKey: String, userId: String, name: String)

GET           /api/:tenant/organisations/:orgKey/_extracted                                                               controllers.UserExtractController.extractedData(tenant: String, orgKey: String, page: Int ?= 0, pageSize: Int ?= 10)

GET           /api/:tenant/organisations/:orgKey/users/:userId/_extracted                                                 controllers.UserExtractController.userExtractedData(tenant: String, orgKey: String, userId: String, page: Int ?= 0, pageSize: Int ?= 10)

# Extractions Old

GET           /api/:tenant/organisations/:orgKey/users/extractions                                                        controllers.ExtractionController.allExtractionTasksByOrgKey(tenant: String, orgKey: String)

GET           /api/:tenant/organisations/:orgKey/users/extractions/:extractionTaskId                                      controllers.ExtractionController.findExtractedTask(tenant: String, orgKey: String, extractionTaskId: String)

POST          /api/:tenant/organisations/:orgKey/users/:userId/extraction/_start                                          controllers.ExtractionController.startExtractionTask(tenant: String, orgKey: String, userId: String)

POST          /api/:tenant/organisations/:orgKey/users/extractions/:extractionTaskId/apps/:appId/_setFilesMetadata        controllers.ExtractionController.setFilesMetadata(tenant: String, orgKey: String, extractionTaskId: String, appId: String)

POST          /api/:tenant/organisations/:orgKey/users/extractions/:extractionTaskId/apps/:appId/files/*name              controllers.ExtractionController.uploadFile(tenant: String, orgKey: String, extractionTaskId: String, appId: String, name: String)

# Organisations

GET           /api/:tenant/organisations                                                                                  controllers.OrganisationController.list(tenant: String)

GET           /api/:tenant/organisations.ndjson                                                                           controllers.OrganisationController.download(tenant: String, from: String ?= "2000-01-01T00:00:00Z", to: String ?= "2100-01-01T00:00:00Z")

POST          /api/:tenant/organisations                                                                                  controllers.OrganisationController.create(tenant: String)

GET           /api/:tenant/organisations/:orgKey                                                                          controllers.OrganisationController.findAllReleasedByKey(tenant: String, orgKey: String)

DELETE        /api/:tenant/organisations/:orgKey                                                                          controllers.OrganisationController.delete(tenant: String, orgKey: String)

GET           /api/:tenant/organisations/:orgKey/last                                                                     controllers.OrganisationController.findLastReleasedByKey(tenant: String, orgKey: String)

GET           /api/:tenant/organisations/:orgKey/offers                                                                   controllers.OrganisationOfferController.findAll(tenant: String, orgKey: String)

POST          /api/:tenant/organisations/:orgKey/offers                                                                   controllers.OrganisationOfferController.add(tenant: String, orgKey: String)

PUT           /api/:tenant/organisations/:orgKey/offers/:offerKey                                                         controllers.OrganisationOfferController.update(tenant: String, orgKey: String, offerKey: String)

DELETE        /api/:tenant/organisations/:orgKey/offers/:offerKey                                                         controllers.OrganisationOfferController.delete(tenant: String, orgKey: String, offerKey: String)

POST          /api/:tenant/organisations/:orgKey/offers/:offerKey/_init                                                   controllers.OrganisationOfferController.initializeOffer(tenant, orgKey, offerKey)

GET           /api/:tenant/organisations/:orgKey/draft                                                                    controllers.OrganisationController.findDraftByKey(tenant: String, orgKey: String)

GET           /api/:tenant/organisations/:orgKey/users                                                                    controllers.UserController.listByOrganisation(tenant: String, orgKey: String, page: Int ?= 0, pageSize: Int ?= 10, userId: Option[String] ?= None)

GET           /api/:tenant/organisations/:orgKey/:versionNum                                                              controllers.OrganisationController.findReleasedByKeyAndVersionNum(tenant: String, orgKey: String, versionNum: Int)

PUT           /api/:tenant/organisations/:orgKey/draft                                                                    controllers.OrganisationController.replaceDraftIfExists(tenant: String, orgKey: String)

POST          /api/:tenant/organisations/:orgKey/draft/_release                                                           controllers.OrganisationController.releaseDraft(tenant: String, orgKey: String)

GET           /api/:tenant/organisations/:orgKey/users/_template                                                          controllers.ConsentController.getTemplate(tenant: String, orgKey: String, userId: Option[String] ?= None, offerKeys: Option[Seq[String]] ?= None)

PUT           /api/:tenant/organisations/:orgKey/users/:userId                                                            controllers.ConsentController.createOrReplaceIfExists(tenant: String, orgKey: String, userId: String)

DELETE        /api/:tenant/organisations/:orgKey/users/:userId/offers/:offerKey                                           controllers.ConsentController.deleteOffer(tenant: String, orgKey: String, userId: String, offerKey: String)

GET           /api/:tenant/organisations/:orgKey/users/:userId                                                            controllers.ConsentController.find(tenant: String, orgKey: String, userId: String)

GET           /api/:tenant/organisations/:orgKey/users/:userId/logs                                                       controllers.ConsentController.getConsentFactHistory(tenant: String, orgKey: String, userId: String, page: Int ?= 0, pageSize: Int ?= 10)

GET           /api/:tenant/accounts/:accountId                                                                            controllers.AccountController.find(tenant: String, accountId: String)

GET           /api/:tenant/accounts                                                                                       controllers.AccountController.findAll(tenant: String, page: Int ?= 0, pageSize: Int ?= 10)

POST          /api/:tenant/accounts                                                                                       controllers.AccountController.create(tenant: String)

PUT           /api/:tenant/accounts/:accountId                                                                            controllers.AccountController.update(tenant: String, accountId: String)

DELETE        /api/:tenant/accounts/:accountId                                                                            controllers.AccountController.delete(tenant: String, accountId: String)

GET           /api/:tenant/users                                                                                          controllers.UserController.listAll(tenant: String, page: Int ?= 0, pageSize: Int ?= 10, userId: Option[String] ?= None)

GET           /api/:tenant/users.ndjson                                                                                   controllers.UserController.download(tenant: String)

GET           /api/:tenant/consents.ndjson                                                                                controllers.ConsentController.download(tenant: String)

GET           /api/:tenant/consentsBulked.ndjson                                                                          controllers.ConsentController.downloadBulked(tenant: String)

GET           /api/:tenant/events                                                                                         controllers.EventController.events(tenant: String)

GET           /api/tenants                                                                                                controllers.TenantController.tenants

POST          /api/tenants                                                                                                controllers.TenantController.createTenant

DELETE        /api/tenants/:tenantKey                                                                                     controllers.TenantController.deleteTenant(tenantKey)

GET           /_healthCheck                                                                                               controllers.MetricsController.healthCheck

GET           /_download/*name                                                                                            controllers.UserExtractController.downloadFile(name: String, uploadToken: String)

GET           /:tenant/bo/*other                                                                                          controllers.HomeController.otherRoutes(tenant: String, other: String)